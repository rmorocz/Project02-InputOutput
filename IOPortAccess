// 0. Documentation
//    Purpose:          To control an LED by interacting with a switch. Pressing the switch will toggle the LED ligt, 
//                      and releasing it will turn the LED light ON.  
//    Author:           Ricardo Morocz
//    Date:             07/08/2017
//    Acknowledgement:  Work based on the code developed by Ramesh Yerraballi & Jon Valvano as part of the UT Austin's 
//                      Embedded Systems online course lab 6 set-up
//    Notes:            - built-in connection: PF0 connected to negative logic momentary switch, SW2
//                      - built-in connection: PF1 connected to red LED
//                      - built-in connection: PF2 connected to blue LED
//                      - built-in connection: PF3 connected to green LED
//                      - built-in connection: PF4 connected to negative logic momentary switch, SW1

// 1. Pre-Processor Directives
#include "TExaS.h"

#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))
#define SYSCTL_RCGC2_GPIOF      0x00000020  // port F Clock Gating Control

// 2. Global Declaration

//    Global Variables
unsigned long In;             // Input from PF4 (switch)
unsigned long Out;            // Output to PF2 (blue LED)

//    Function Prototypes
void PortF_Init (void);                     // Port F Initialization
void Delay100ms (void);                     // 100 ms delay function 
void DisableInterrupts(void);               // Disable interrupts
void EnableInterrupts(void);                // Enable interrupts

// 3. Functions/Subroutines

int main(void){ unsigned long volatile delay;
  TExaS_Init(SW_PIN_PF4, LED_PIN_PF2);  // Activate grader and set system clock to 80 MHz
  EnableInterrupts();                   // Enable interrupts for the grader
	PortF_Init();                         // Initialize Port F, specifically PF4 (switch) and PF2 (Blue LED)
  GPIO_PORTF_DATA_R = 0x04;             // Set the PF2 bit so the LED is initially ON
	
	while(1){
    Delay100ms();                       // Delay for about 100ms
		// NOT BIT SPECIFIC ADDRESSING
		In = GPIO_PORTF_DATA_R&0x10;        // Read input from PF4 (switch) by masking specific bit [0001 0000]
		if(In==0){                          // If PF4 (switch) is pressed (negative logic), PF2 (blue LED) will flip ON and OFF
			Out = GPIO_PORTF_DATA_R&0x04;     // Read state of PF2 (blue LED) into output by masking specific bit [0000 0100] to flip from ON to OFF or viceversa
			if(Out==0){                       // If PF2 is OFF, turn ON
				Out = 0x04; 
			  GPIO_PORTF_DATA_R = Out;
			}else{                            // If PF2 is ON, turn OFF
				Out = 0x00;
				GPIO_PORTF_DATA_R = Out;
			}
		} else {                            // If PF4 (switch) is not pressed (negative logic), PF2 (blue LED) is ON
			Out = 0x04; 
			GPIO_PORTF_DATA_R = Out;
		}
  }
}

// PortF_Init: Function that initializes Port F pins for input and output
// Inputs:  none
// Outputs: none
// Notes:   In this case, we only care about PF4 (switch) and PF2 (blue LED)
void PortF_Init (void){
  volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;    // 1) Activate clock for Port F
  delay = SYSCTL_RCGC2_R;          // Allow time for clock to start
  GPIO_PORTF_LOCK_R = 0x4C4F434B;  // 2) unlock GPIO Port F
  GPIO_PORTF_CR_R = 0x1F;          // Allow changes to PF4-0. Only PF0 needs to be unlocked, other bits can't be locked                               
  GPIO_PORTF_AMSEL_R = 0x00;       // 3) Disable the analog function of the pin, because we will be using the pin for digital I/O
  GPIO_PORTF_PCTL_R = 0x00000000;  // 4) Clear bits in the PCTL to select regular digital function
  GPIO_PORTF_DIR_R = 0x0E;         // 5) Set its direction register of PF4 and PF2. [0000 1110] PF4 PF0 IN, PF3 PF2 PF1 OUT (Do not care about other ports)
  GPIO_PORTF_AFSEL_R = 0x00;       // 6) Clear bits in the alternate function register (disable alt funct on PF7-0)
  GPIO_PORTF_PUR_R = 0x10;         // Enable pull-up on PF4
  GPIO_PORTF_DEN_R = 0x14;         // 7) Enables digital IO [0001 0100] on PF4 and PF2
}

// Delay_Fun: Function that delays the program by a multiple of 100ms
// Inputs:  none
// Outputs: delay 100ms
// Notes:   Assume bus clock 80MHz and 6 cycles per loop
void Delay100ms (){
	unsigned long i = 1333333;  // 100ms * 80MHz / 6 cycles per loop = 1333333
  while(i > 0){
      i = i - 1;
  }
}
